{"version":3,"sources":["webpack:///webpack/bootstrap 8af3375ade618580c8a0","webpack:///./src/index.js","webpack:///./src/tgForm.js","webpack:///./~/override-fn/index.js","webpack:///./src/tgModel.js","webpack:///./src/tgFormMessage.js","webpack:///./src/tgFormValidator.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACTA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA,kBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC;AACzC;AACA,kCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;;;;;;ACzNA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA,UAAS,IAAI;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAC;AACD;AACA;AACA,MAAK;AACL,E;;;;;;ACtEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;;AAEA;AACA,8BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AClFA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC9CA;;AAEA;AACA;AACA;AACA;AACA;AACA,uFAAsF,KAAK;AAC3F;AACA;AACA;;AAEA","file":"tg-form.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8af3375ade618580c8a0\n **/","var tgForm = require('./tgForm'),\n    tgModel = require('./tgModel'),\n    tgFormMessage = require('./tgFormMessage'),\n    tgFormValidator = require('./tgFormValidator');\n\nangular.module('tg.form', [])\n    .directive('tgForm', tgForm)\n    .directive('ngModel', tgModel)\n    .directive('tgFormMessage', tgFormMessage)\n    .directive('tgFormValidator', tgFormValidator);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","var overrideFn = require('override-fn');\n\ntgForm.$inject = ['$parse', '$timeout'];\n\nfunction tgForm($parse, $timeout) {\n    return {\n        restrict: 'EA',\n        require: ['form', 'tgForm'],\n        compile: function () {\n            function preLink(scope, element, attrs, ctrls) {\n                var formCtrl = ctrls[0],\n                    tgFormCtrl = ctrls[1],\n                    onSubmit = $parse(attrs.onSubmit);\n\n                formCtrl.$isExtendedForm = true;\n                tgFormCtrl.$form = formCtrl;\n\n                formCtrl.submit = function () {\n                    var event = new Event('submit'),\n                        nativeElement = element[0];\n\n\n                    /**\n                     *  Current angular submit handler:\n                     *  var handleFormSubmission = function(event) {\n                         *      scope.$apply(function() {\n                         *          controller.$commitViewValue();\n                         *          controller.$setSubmitted();\n                         *      });\n                         *\n                         *      event.preventDefault();\n                         *  };\n                     *\n                     *  Cause this block working in angular context\n                     *  and to prevent Error: $digest already in progress\n                     *  We've to run this asynchronously\n                     */\n                    setTimeout(function () {\n                        nativeElement.dispatchEvent(event);\n                    });\n                };\n\n                formCtrl.hasErrorOfType = function (errorType) {\n                    return !!(errorType && formCtrl.$error[errorType]);\n                };\n                \n                overrideFn(formCtrl, {\n                    $addControl: function (baseFn, control) {\n                        baseFn();\n\n                        tgFormCtrl.$$addFormControl(control);\n\n                        if (control.hasOwnProperty('$parsers') &&\n                            control.hasOwnProperty('$formatters')) {\n                            var validationTrigger = function (value) {\n                                tgFormCtrl.$$validateCustoms(control);\n\n                                return value;\n                            };\n\n                            control.$parsers.push(validationTrigger);\n                            control.$formatters.push(validationTrigger);\n                        }\n                    },\n                    $removeControl: function (baseFn, control) {\n                        baseFn();\n\n                        tgFormCtrl.$$removeFormControl(control);\n                    },\n                    $setSubmitted: function (baseFn) {\n                        if (formCtrl.$$inSubmition) {\n                            return;\n                        }\n\n                        baseFn();\n\n                        if (attrs.showErrorsOnSubmit === 'true') {\n                            tgFormCtrl.$$updateFormErrors();\n                        }\n\n                        if (attrs.submitChildForms === 'true') {\n                            tgFormCtrl.formControls.forEach(function (formControl) {\n                                if (formControl.hasOwnProperty('$setSubmitted') && !formControl.$submitted) {\n                                    formCtrl.$$inSubmition = true;\n                                    formControl.$setSubmitted();\n                                    formCtrl.$$inSubmition = false;\n                                }\n                            });\n                        }\n\n                        if (formCtrl.$valid) {\n                            onSubmit(scope, {\n                                $form: formCtrl\n                            });\n                        }\n                    }\n                });\n            }\n\n            return {\n                pre: preLink\n            };\n        },\n        controller: ['$attrs', function tgFormController(attrs) {\n            this.formMessages = [];\n            this.formControls = [];\n\n            this.$$addFormMessage = function (formMessage) {\n                this.formMessages.push(formMessage);\n            };\n\n            this.$$removeFormMessage = function (formMessage) {\n                var idx = this.formMessages.indexOf(formMessage);\n\n                if (idx !== -1) {\n                    this.formMessages.splice(idx, 1);\n                }\n            };\n\n            this.$$addFormControl = function (formControl) {\n                this.formControls.push(formControl);\n            };\n\n            this.$$removeFormControl = function (formControl) {\n                var idx = this.formControls.indexOf(formControl);\n\n                if (idx !== -1) {\n                    this.formControls.splice(idx, 1);\n                }\n            };\n\n            this.$$validateCustoms = function (excluded) {\n                var self = this;\n\n                if (!Array.isArray(excluded)) {\n                    excluded = [excluded];\n                }\n\n                $timeout(function () {\n                    self.formControls.forEach(function (ngModelCtrl) {\n                        if (ngModelCtrl.hasOwnProperty('$hasCustomValidations') &&\n                            excluded.indexOf(ngModelCtrl) === -1) {\n                            ngModelCtrl.$validate();\n                        }\n                    });\n\n                    self.$$updateFormErrors();\n                });\n            };\n\n            this.$$updateFormErrors = function () {\n                var self = this;\n\n                self.formMessages.forEach(function (formMessage) {\n                    formMessage.setMessage(null);\n                });\n\n                var fUpdateFormErrorsFor = function (formCtrl) {\n                    if (attrs.showErrorsOnSubmit !== 'true' || formCtrl.$submitted) {\n                        for (var validationKey in formCtrl.$error) {\n                            if (formCtrl.$error.hasOwnProperty(validationKey)) {\n                                var controls = formCtrl.$error[validationKey];\n\n                                if (!Array.isArray(controls)) {\n                                    controls = [controls];\n                                }\n\n                                controls.forEach(function (control) {\n                                    if (control.hasOwnProperty('$submitted')) {\n                                        if (!control.$isExtendedForm) {\n                                            fUpdateFormErrorsFor(control);\n                                        }\n                                    }\n                                    else if (control.$invalid) {\n                                        self.formMessages.forEach(function (formMessage) {\n                                            if (control.$name === formMessage.name ||\n                                                (formMessage.isFormMessage && control.$isFormValidator)) {\n                                                if (!formMessage.getMessage()) {\n                                                    formMessage.setMessageByKey(validationKey);\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    }\n                };\n\n                fUpdateFormErrorsFor(self.$form);\n            };\n\n            this.$$updateControlErrors = function (ngModelCtrl) {\n                var self = this;\n\n                if (ngModelCtrl.$invalid) {\n                    if (attrs.showErrorsOnSubmit !== 'true' || self.$form.$submitted) {\n                        for (var validationKey in ngModelCtrl.$error) {\n                            if (ngModelCtrl.$error.hasOwnProperty(validationKey) &&\n                                ngModelCtrl.$error[validationKey]) {\n                                self.formMessages.forEach(function (formMessage) {\n                                    if ((ngModelCtrl.$name === formMessage.name) ||\n                                        (formMessage.isFormMessage && ngModelCtrl.$isFormValidator)) {\n                                        if (!formMessage.getMessage()) {\n                                            formMessage.setMessageByKey(validationKey);\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n            };\n        }]\n    };\n}\n\nmodule.exports = tgForm;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/tgForm.js\n ** module id = 1\n ** module chunks = 0\n **/","function overrideFn(context, fnName, fn) {\n    if (typeof fnName === 'string') {\n        return overrideFnInternal(context, fnName, fn);\n    } else {\n        var obj = arguments[1],\n            keys = Object.keys(obj);\n\n        return keys.reduce(function (result, key) {\n            result[key] = overrideFnInternal(context, key, obj[key]);\n\n            return result;\n        }, {});\n    }\n\n    function overrideFnInternal(context, fnName, fn) {\n        var baseFn = context[fnName] || function () {};\n\n        context[fnName] = function overrideFunction() {\n            var args = arguments,\n                params = Array.prototype.slice.call(args),\n                isCalledLikeConstructor = this instanceof overrideFunction;\n\n            params.unshift(function () {\n                var _args = arguments.length ? arguments : args,\n                    _params = Array.prototype.slice.call(_args);\n\n                if (isCalledLikeConstructor) {\n                    _params.unshift(this);\n\n                    return new (Function.prototype.bind.apply(baseFn, _params));\n                }\n\n                return baseFn.apply(this, _params);\n            }.bind(this));\n\n            return fn.apply(this, params);\n        };\n\n        try {\n            Object.defineProperties(context[fnName], {\n                length: {\n                    get: function () {\n                        return baseFn.length;\n                    }\n                },\n                name: {\n                    get: function () {\n                        return baseFn.name;\n                    }\n                }\n            });\n        }\n        catch (ex) {\n            console.warn(ex);\n        }\n\n        context[fnName].toString = function () {\n            return baseFn.toString();\n        };\n\n        return baseFn;\n    }\n}\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = overrideFn;\n} else if (typeof define === 'function' && define.amd) {\n    define('overrideFn', [], function () {\n        return overrideFn;\n    });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/override-fn/index.js\n ** module id = 2\n ** module chunks = 0\n **/","var overrideFn = require('override-fn');\n\ntgModel.$inject = ['$q'];\n\nfunction tgModel($q) {\n    return {\n        restrict: 'EA',\n        require: ['ngModel', '^?tgForm'],\n        compile: function () {\n            function getValidationKey(str, prefix) {\n                var validationKey = str.substring(prefix.length);\n\n                return validationKey.charAt(0).toLowerCase() + validationKey.slice(1);\n            }\n\n            function preLink(scope, element, attrs, ctrls) {\n                var ngModelCtrl = ctrls[0],\n                    tgFormCtrl = ctrls[1],\n                    tgValidateStr = 'tgValidate',\n                    tgValidateAsyncStr = 'tgValidateAsync';\n\n                if (!tgFormCtrl) {\n                    return false;\n                }\n\n                if (ngModelCtrl.$name.indexOf('form-validator') === 0) {\n                    ngModelCtrl.$isFormValidator = true;\n                }\n\n                for (var prop in attrs) {\n                    if (attrs.hasOwnProperty(prop)) {\n                        var idx = prop.indexOf(tgValidateStr);\n\n                        if (idx === 0) {\n                            ngModelCtrl.$hasCustomValidations = true;\n\n                            var validationFn = attrs[prop],\n                                isAsync = prop.indexOf(tgValidateAsyncStr) === 0,\n                                validators = isAsync ? ngModelCtrl.$asyncValidators : ngModelCtrl.$validators,\n                                validationKey = getValidationKey(prop, isAsync ? tgValidateAsyncStr : tgValidateStr);\n\n                            validators[validationKey] = function (isAsync, validationFn, modelValue, viewValue) {\n                                var result = scope.$eval(validationFn, {\n                                    $form: tgFormCtrl,\n                                    $value: viewValue,\n                                    $model: modelValue\n                                });\n\n                                if (isAsync) {\n                                    // result is not promise\n                                    if (!(result && result.then)) {\n                                        result = (result) ? $q.resolve(result) : $q.reject(result);\n                                    }\n                                } else {\n                                    // convert result to boolean\n                                    result = !!result;\n                                }\n\n                                return result;\n                            }.bind(null, isAsync, validationFn);\n                        }\n                    }\n                }\n\n                overrideFn(ngModelCtrl, '$$runValidators', function (baseFn, modelValue, viewValue, doneCallback) {\n                    baseFn(modelValue, viewValue, function (allValid) {\n                        doneCallback(allValid);\n\n                        if (!allValid) {\n                            tgFormCtrl.$$updateControlErrors(ngModelCtrl);\n                        }\n                    });\n                });\n            }\n\n            return {\n                pre: preLink\n            };\n        }\n    };\n}\n\nmodule.exports = tgModel;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/tgModel.js\n ** module id = 3\n ** module chunks = 0\n **/","tgFormMessage.$inject = [];\n\nfunction tgFormMessage() {\n    return {\n        restrict: 'EA',\n        require: '^tgForm',\n        scope: true,\n        template: '<span class=\"form-message\">{{message}}</span>',\n        compile: function () {\n            function preLink(scope, element, attrs, tgFormCtrl) {\n                var inst = {\n                    name: attrs.name || '@',\n                    isFormMessage: (!attrs.name),\n                    setMessageByKey: function (key) {\n                        if (key) {\n                            key = key + 'Message';\n\n                            if (attrs.hasOwnProperty(key)) {\n                                var msg = scope.$parent.$eval(attrs[key]);\n\n                                this.setMessage(msg);\n                            }\n                        }\n                    },\n                    setMessage: function (message) {\n                        scope.message = message;\n                    },\n                    getMessage: function () {\n                        return scope.message;\n                    }\n                };\n\n                tgFormCtrl.$$addFormMessage(inst);\n\n                scope.$on('$destroy', function () {\n                    tgFormCtrl.$$removeFormMessage(inst);\n                });\n            }\n\n            return {\n                pre: preLink\n            };\n        }\n    };\n}\n\nmodule.exports = tgFormMessage;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/tgFormMessage.js\n ** module id = 4\n ** module chunks = 0\n **/","tgFormValidator.$inject = [];\n\nfunction tgFormValidator() {\n    return {\n        restrict: 'EA',\n        require: '^tgForm',\n        scope: true,\n        template: '<input type=\"hidden\" ng-model=\"__validator\" name=\"form-validator-{{$id}}\">',\n        replace: true\n    };\n}\n\nmodule.exports = tgFormValidator;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/tgFormValidator.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}